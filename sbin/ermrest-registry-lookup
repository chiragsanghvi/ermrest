#!/usr/bin/env python

import sys
import ermrest

def usage():
    message = """
usage: ermrest-registry-lookup [--deleted] [--key <keyname>] [<catalog id>]

This utility looks up a catalog in the ERMrest registry and returns
its catalog descriptor. Run this utility under the deployed ERMrest 
daemon account.

Options:

    --deleted           Look for deleted catalogs.

    --key <keyname>     Return only the <keyname> field from the 
                        catalog descriptor.

Arguments:

    <catalog id>        The EMRrest catalog identifier. If none, 
                        it will look for all catalogs.

Exit status:

  0  success
  1  command-line usage error
  2  registry not configured
  3  catalog not found
  4  key not found
  5  other runtime errors
"""
    sys.stderr.write(message)


def main(argv):

    # Check arg length
    arglen = len(argv)
    if arglen not in range(0,5):
        sys.stderr.write("Bad arguments.")
        usage()
        return 1

    # Test for deleted flag
    deleted = False
    if arglen and argv[0] == "--deleted":
        argv = argv[1:]
        deleted = True

    # Get optional 'keyname' argument
    keyname = None
    if len(argv) and argv[0] == "--key":
        keyname = argv[1]
        argv = argv[2:]

    catalog_id = None
    if len(argv):
        catalog_id = argv[-1]

    # Check if registry configured 
    if not ermrest.registry:
        sys.stderr.write("ERMrest catalog registry not configured.\n")
        return 2

    # Lookup catalog
    results = ermrest.registry.lookup(catalog_id, deleted)
    if not results:
        sys.stderr.write("Catalog '%s' not found in registry.\n" % str(catalog_id))
        return 3

    # Write results to stdout
    for result in results:
        # id
        sys.stdout.write(str(result['id']) + " ")
   
        # descriptor or specific value
        catalog_descriptor = result['descriptor']
        if keyname:
            val = catalog_descriptor.get(keyname)
            if not val:
                sys.stderr.write("Key '%s' not found in Catalog descriptor.\n" % keyname)
                return 4
            sys.stdout.write(str(val))
        else:
            sys.stdout.write(str(catalog_descriptor))

        if deleted:
            sys.stdout.write(" " + str(result['deletedon']))

        sys.stdout.write("\n") 

if __name__ == '__main__':
    sys.exit( main(sys.argv[1:]) )
