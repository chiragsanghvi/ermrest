#!/bin/sh

# 
# Copyright 2012-2015 University of Southern California
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

DAEMONUSER="${DAEMONUSER:-ermrest}" # Unix and DB user name
MASTERDB="${MASTEDB:-$DAEMONUSER}" # Master DB name
PROG=$(basename "${0}")

# Usage message
function usage {
    cat >&2 << EOF
usage: ${PROG} [-afh] [-i <interval>]

Options:
    -a              purge all catalogs
    -f              force disconnect of clients before attempting purges
    -h              print usage and exit
    -i <interval>   purge catalogs that were deleted prior to <interval>
                    examples: '5 weeks', '3 days', '1 year'
EOF
}

# Command-line Arguments
while getopts ":h :a :f :i:" opt; do
  case $opt in
    h)
      usage
      exit 0
      ;;
    f)
      FORCE=1
      ;;
    a)
      ALL=1
      ;;
    i)
      INTERVAL="${OPTARG}"
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      usage
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument" >&2
      usage
      exit 1
      ;;
  esac
done

# Validate arguments
if test -n "${ALL}" -a -n "${INTERVAL}"; then
    echo "Mutually exclusive options: -a and -i" >&2
    usage
    exit 1
fi

# Drop the database using the PostgreSQL 'dropdb' utility
function drop_db {
    local _db=$1
    echo -n " DROPPING" >&2
    runuser -c "dropdb --if-exists --maintenance-db=${MASTEDB} \"${_db}\"" - "${DAEMONUSER}"
    return $?
}

# Force disconnect of clients
function force_disconnect {
    local _db=$1
    echo -n " DISCONNECTING" >&2
    # TODO
    return 0
}

# Delete the catalog entry from the simple_registry
function delete_catalog {
    local _id=$1
    echo -n " DELETING" >&2
    runuser -c "psql -q -c \"DELETE FROM ermrest.simple_registry WHERE id = '${_id}'\" ${MASTEDB}" - "${DAEMONUSER}"
    return $?
}

# Generate the select statement
function select_statement {
    echo -n "SELECT id, descriptor::json->'dbname' FROM ermrest.simple_registry"
    if [ -n "${INTERVAL}" ]; then
        echo -n " WHERE deleted_on < (current_timestamp - interval '${INTERVAL}')"
    elif [ -z "${ALL}" ]; then
        echo -n " WHERE deleted_on IS NOT NULL"
    fi
}

# For all selected catalogs, attempt to dropdb and delete from registry
runuser -c "psql -A -t -q -c \"`select_statement`\" ${MASTEDB}" - "${DAEMONUSER}" | {
while read result
do
    id=$(echo "${result}" | awk -F\| '{ print $1 }')
    db=$(echo "${result}" | awk -F\| '{ print $2 }' | sed 's/"//g')

    echo -n "FOUND $id $db" >&2

    if [ -n "${FORCE}" ]; then
        force_disconnect || (echo " FAILED" >&2 && continue)
    fi

    drop_db "${db}" || (echo " FAILED" >&2 && continue)

    delete_catalog "${id}" || (echo " FAILED" >&2 && continue)

    echo " DONE" >&2
done
}
