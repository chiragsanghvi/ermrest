#!/bin/sh

# 
# Copyright 2012-2015 University of Southern California
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

PROG=$(basename "${0}")
POSTGRES="${POSTGRES:-postgres}"    # Postgres daemon user
DAEMONUSER="${DAEMONUSER:-ermrest}" # Unix and DB user name
MASTERDB="${MASTEDB:-$DAEMONUSER}"  # Master DB name
LOG=${LOG:-/dev/stderr}             # Log message file
DEBUG=${DEBUG:-0}                   # Debug flag

# Prints log message to logfile (default: stderr)
function log {
    printf "$1" >${LOG}
}

# Prints usage message
function usage {
    cat >&2 << EOF
usage: ${PROG} [-dfh] [-a|i <interval>]

Options:
    -a              purge all catalogs
    -d              debug mode; does not purge
    -f              force disconnect of clients before attempting purges
    -h              print usage and exit
    -i <interval>   purge catalogs that were deleted prior to <interval>
                    examples: '5 weeks', '3 days', '1 year'
    -q              quiet mode
EOF
}

# Get command-line options
while getopts ":a :d :f :h :i: :q" opt; do
  case $opt in
    a)
      ALL=1
      ;;
    d)
      DEBUG=1
      ;;
    h)
      usage
      exit 0
      ;;
    f)
      FORCE=1
      ;;
    q)
      LOG=/dev/null
      ;;
    i)
      INTERVAL="${OPTARG}"
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      usage
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument" >&2
      usage
      exit 1
      ;;
  esac
done

# Validate arguments
if test -n "${ALL}" -a -n "${INTERVAL}"; then
    echo "Mutually exclusive options: -a and -i" >&2
    usage
    exit 1
fi

# Generate query statement
QUERY="SELECT id, descriptor::json->'dbname' FROM ermrest.simple_registry"
if [ -n "${INTERVAL}" ]; then
    QUERY="${QUERY} WHERE deleted_on < (CURRENT_TIMESTAMP - interval '${INTERVAL}')"
elif [ -z "${ALL}" ]; then
    QUERY="${QUERY} WHERE deleted_on IS NOT NULL"
fi

# For all selected catalogs, attempt to dropdb and delete from registry
runuser -c "psql -A -t -q -c \"${QUERY}\" ${MASTEDB}" - "${DAEMONUSER}" | {
while read result
do
    id=$(echo "${result}" | awk -F\| '{ print $1 }')
    db=$(echo "${result}" | awk -F\| '{ print $2 }' | sed 's/"//g')
    log "PURGING $id $db"

    # skip if debug mode (easy way to see what would have been purged)
    if [ "${DEBUG}" -eq 1 ]; then
        log "\n"
        continue
    fi

    # force disconnect of clients, optional
    if [ -n "${FORCE}" ]; then
        runuser -c "psql -q \"${MASTERDB}\" >/dev/null" - "${POSTGRES}" <<EOF
-- first, disallow further connections to database
UPDATE pg_database SET datallowconn = false WHERE datname = '${db}';
-- then, terminate all backend processes for this db
SELECT pid, 
       (SELECT pg_terminate_backend(pid)) as killed
FROM pg_stat_activity
WHERE datname = '${db}';
EOF
        if [ $? -ne 0 ]; then
            log " DISCONNECT FAILED\n"
            continue
        fi
        log " DISCONNECTED"
    fi

    # drop database
    runuser -c "dropdb --if-exists --maintenance-db=\"${MASTEDB}\" \"${db}\"" - "${DAEMONUSER}"
    if [ $? -ne 0 ]; then
        log " DROP FAILED\n"
        continue
    fi
    log " DROPPED"

    # delete registry entry of catalog
    runuser -c "psql -q -c \"DELETE FROM ermrest.simple_registry WHERE id = '${id}'\" ${MASTEDB}" - "${DAEMONUSER}"
    if [ $? -ne 0 ]; then
        log " DELETE FAILED\n"
        continue
    fi
    log " DELETED\n"
done
}
